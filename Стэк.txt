SS:SP (SS:ESP) - вершина стека
PUSH помещает в стек 16/32-битное значение из регистра или ячейки памяти

push eax
//////////////
sub ESP, 4
MOV [ss:esp], eax
/////////////

POP
pop eax
/////////////
mov eax, [ss:esp]
add esp, 4
/////////////


8-битные регистры в стеке сохранить нельзя !!!!!

PUSHA - СОХРАНИТЬ В СТЕК ВСЕ 16-БИТНЫЕ РЕГИСТРЫ ОБЩЕГО НАЗНАЧЕНИЯ
POPA - ИЗВЛЕЧЬ ИЗ СТЕКА

PUSHAD - 32
POPAD

Порядок помещения регистров:
(E)AX
(E)CX
(E)DX
(E)BX
(E)SP
(E)BP
(E)SI
(E)DI

PUSHF(D) - ЗАСУНУТЬ РЕГИСТР ПРИЗНАКОВ В СТЕК 16 (32)БИТ
POPF(D)





CALL тип_вызова операнд
RET

Операндом может быть значение, регистр, метка. (E)IP помещается в стек
При типе_вызова far сохраняется так же CS -> RETF



Соглашения о вызове подпрограмм:
Вызывающая сторона
1. Сохранить регистры eax, edx, ecx
2. Записать аргументы функции в стэк в обратном порядке
3. Вызвать подпрограмму
После
1. Удалить аргументы функции
2.восстановить регистры


Вызываемая:
1. Сохранить ebp стэк
2. Записать в ebp esp
3. Выделить в стэке память под локальные переменные
4. Записать в стек значения регистров



	
	-----------------
	| registers	| <- esp
	-----------------
	|      ...	|
	-----------------
	| variable 2	|
	-----------------
	| variable 1	| <- ebp - 4	
	-----------------
	| saved ebp     | <-ebp
	-----------------
	| ret		| 
	-----------------
	| argument 1	| <- ebp + 8 
	-----------------
	| argument 2	|
	-----------------
	|      ...	|
	-----------------
	|		|
	|		|
	

enter a, b - 
a - колличество байт к выделению локальных переменных
b - уровень вложенности

Помещает в стек указатели на стековый кадр текущей процедуры и той, из которой был вызов

leave - противоположно enter